import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useState } from 'react';
import {
  ContextMenu,
  ContextMenuCheckboxItem,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuLabel,
  ContextMenuRadioGroup,
  ContextMenuRadioItem,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuTrigger,
} from "./context-menu";
import {
  Copy,
  Scissors,
  ClipboardPaste,
  Edit,
  Trash2,
  Share,
  Download,
  Star,
  Eye,
  EyeOff,
  Folder,
  File,
  Image,
  Music,
  Video,
  FileText,
  Archive,
  RefreshCw,
  Info,
  Settings,
  Lock,
  Unlock,
  Heart,
  Bookmark,
  Flag,
  MoreHorizontal,
  Grid,
  List,
  Columns,
  Zap,
  Clock,
  Calendar,
  Tag,
  Link,
  Mail,
  Phone,
  MessageSquare,
  Bell,
} from "lucide-react";

export default {
  title: "UI/ContextMenu",
  component: ContextMenu,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "Displays a menu located at the pointer, triggered by a right click or a long press. Built with Radix UI primitives for accessibility and keyboard navigation.",
      },
    },
  },
  tags: ["autodocs"],
  argTypes: {
    // Root Props
    defaultOpen: {
      control: 'boolean',
      description: 'The open state of the context menu when it is initially rendered.',
      table: { category: 'Root Props' }
    },
    open: {
      control: "boolean",
      description:
        "The controlled open state of the context menu. Must be used in conjunction with onOpenChange.",
      table: { category: 'Root Props' }
    },
    onOpenChange: {
      action: 'onOpenChange',
      description: 'Event handler called when the open state of the context menu changes.',
      table: { category: 'Root Props' }
    },
    modal: {
      control: 'boolean',
      description: 'The modality of the context menu.',
      table: { category: 'Root Props' }
    },

    // Trigger Props
    triggerAsChild: {
      control: 'boolean',
      description: 'Change the default rendered element for the trigger.',
      table: { category: 'Trigger Props' }
    },
    disabled: {
      control: 'boolean',
      description: 'When true, the context menu trigger will be disabled.',
      table: { category: 'Trigger Props' }
    },

    // Content Props
    contentAsChild: {
      control: 'boolean',
      description: 'Change the default rendered element for the content.',
      table: { category: 'Content Props' }
    },
    loop: {
      control: 'boolean',
      description: 'When true, keyboard navigation will loop from last item to first, and vice versa.',
      table: { category: 'Content Props' }
    },
    onCloseAutoFocus: {
      action: 'onCloseAutoFocus',
      description: 'Event handler called when auto-focusing on close.',
      table: { category: 'Content Props' }
    },
    onEscapeKeyDown: {
      action: 'onEscapeKeyDown',
      description: 'Event handler called when the escape key is down.',
      table: { category: 'Content Props' }
    },
    onPointerDownOutside: {
      action: 'onPointerDownOutside',
      description: 'Event handler called when a pointer event occurs outside the bounds.',
      table: { category: 'Content Props' }
    },
    onFocusOutside: {
      action: 'onFocusOutside',
      description: 'Event handler called when focus moves outside the bounds.',
      table: { category: 'Content Props' }
    },
    onInteractOutside: {
      action: 'onInteractOutside',
      description: 'Event handler called when an interaction happens outside the bounds.',
      table: { category: 'Content Props' }
    },
    forceMount: {
      control: 'boolean',
      description: 'Used to force mounting when more control is needed.',
      table: { category: 'Content Props' }
    },
    side: {
      control: 'select',
      options: ['top', 'right', 'bottom', 'left'],
      description: 'The preferred side of the trigger to render against.',
      table: { category: 'Content Props' }
    },
    sideOffset: {
      control: { type: 'number', min: -50, max: 50 },
      description: 'The distance in pixels from the trigger.',
      table: { category: 'Content Props' }
    },
    align: {
      control: 'select',
      options: ['start', 'center', 'end'],
      description: 'The preferred alignment against the trigger.',
      table: { category: 'Content Props' }
    },
    alignOffset: {
      control: { type: 'number', min: -50, max: 50 },
      description: 'An offset in pixels from the "start" or "end" alignment options.',
      table: { category: 'Content Props' }
    },
    avoidCollisions: {
      control: 'boolean',
      description: 'When true, overrides the side and align to prevent collisions with boundary edges.',
      table: { category: 'Content Props' }
    },
    collisionBoundary: {
      control: 'object',
      description: 'The element used as the collision boundary.',
      table: { category: 'Content Props' }
    },
    collisionPadding: {
      control: { type: 'number', min: 0, max: 50 },
      description: 'The distance in pixels from the boundary edges where collision detection should occur.',
      table: { category: 'Content Props' }
    },
    sticky: {
      control: 'select',
      options: ['partial', 'always'],
      description: 'The sticky behavior on the align axis.',
      table: { category: 'Content Props' }
    },
    hideWhenDetached: {
      control: 'boolean',
      description: 'Whether to hide when the trigger becomes fully occluded.',
      table: { category: 'Content Props' }
    },

    // Item Props
    itemDisabled: {
      control: 'boolean',
      description: 'When true, prevents the user from interacting with the item.',
      table: { category: 'Item Props' }
    },
    itemAsChild: {
      control: 'boolean',
      description: 'Change the default rendered element for the item.',
      table: { category: 'Item Props' }
    },
    textValue: {
      control: 'text',
      description: 'Optional text used for typeahead purposes.',
      table: { category: 'Item Props' }
    },

    // Checkbox Item Props
    checkboxChecked: {
      control: 'boolean',
      description: 'The controlled checked state of the checkbox item.',
      table: { category: 'Checkbox Item Props' }
    },
    onCheckboxCheckedChange: {
      action: 'onCheckboxCheckedChange',
      description: 'Event handler called when the checked state changes.',
      table: { category: 'Checkbox Item Props' }
    },

    // Radio Item Props
    radioValue: {
      control: 'text',
      description: 'The unique value of the radio item.',
      table: { category: 'Radio Item Props' }
    },

    // Sub Menu Props
    subDefaultOpen: {
      control: 'boolean',
      description: 'The open state of the submenu when it is initially rendered.',
      table: { category: 'Sub Menu Props' }
    },
    subOpen: {
      control: 'boolean',
      description: 'The controlled open state of the submenu.',
      table: { category: 'Sub Menu Props' }
    },
    onSubOpenChange: {
      action: 'onSubOpenChange',
      description: 'Event handler called when the open state of the submenu changes.',
      table: { category: 'Sub Menu Props' }
    }
  },
    align: {
      control: "select",
      options: ["start", "center", "end"],
      description: "The preferred alignment against the trigger.",
      table: {
        type: { summary: "enum" },
        defaultValue: { summary: "center" },
      },
    },
    sideOffset: {
      control: "number",
      description: "The distance in pixels from the trigger.",
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "0" },
      },
    },
    alignOffset: {
      control: "number",
      description:
        "An offset in pixels from the start or end alignment options.",
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "0" },
      },
    },
    avoidCollisions: {
      control: "boolean",
      description:
        "When true, overrides the side and align preferences to prevent collisions with boundary edges.",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
      },
    },
    // Item props
    disabled: {
      control: "boolean",
      description:
        "When true, prevents the user from interacting with the item.",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
    onSelect: {
      action: "onSelect",
      description:
        "Event handler called when the user selects an item (via mouse or keyboard). Calling event.preventDefault in this handler will prevent the context menu from closing when selecting that item.",
      table: {
        type: { summary: "(event: Event) => void" },
        defaultValue: { summary: "undefined" },
      },
    },
    // Checkbox item props
    checked: {
      control: "select",
      options: [true, false, "indeterminate"],
      description:
        "The controlled checked state of the checkbox item. Must be used in conjunction with onCheckedChange.",
      table: {
        type: { summary: "boolean | 'indeterminate'" },
        defaultValue: { summary: "undefined" },
      },
    },
    onCheckedChange: {
      action: "onCheckedChange",
      description:
        "Event handler called when the checked state of the checkbox item changes.",
      table: {
        type: { summary: "(checked: boolean | 'indeterminate') => void" },
        defaultValue: { summary: "undefined" },
      },
    },
    // Radio group props
    value: {
      control: "text",
      description:
        "The value of the selected item in the group. Must be used in conjunction with onValueChange.",
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "undefined" },
      },
    },
    onValueChange: {
      action: "onValueChange",
      description:
        "Event handler called when the value changes in the radio group.",
      table: {
        type: { summary: "(value: string) => void" },
        defaultValue: { summary: "undefined" },
      },
    },
    // Custom variant props
    size: {
      control: "select",
      options: ["sm", "default", "lg"],
      description: "The size variant of the context menu content.",
      table: {
        type: { summary: "enum" },
        defaultValue: { summary: "default" },
      },
    },
    variant: {
      control: "select",
      options: ["default", "destructive"],
      description: "The visual variant of context menu items.",
      table: {
        type: { summary: "enum" },
        defaultValue: { summary: "default" },
      },
    },
    inset: {
      control: "boolean",
      description:
        "When true, adds left padding to accommodate checkbox/radio indicators.",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
  },
};

// Default context menu
export const Default = () => (
  <ContextMenu>
    <ContextMenuTrigger className="flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm">
      Right click here
    </ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>
        <Copy className="mr-2 h-4 w-4" />
        Copy
      </ContextMenuItem>
      <ContextMenuItem>
        <Scissors className="mr-2 h-4 w-4" />
        Cut
      </ContextMenuItem>
      <ContextMenuItem>
        <ClipboardPaste className="mr-2 h-4 w-4" />
        Paste
      </ContextMenuItem>
      <ContextMenuSeparator />
      <ContextMenuItem variant="destructive">
        <Trash2 className="mr-2 h-4 w-4" />
        Delete
      </ContextMenuItem>
    </ContextMenuContent>
  </ContextMenu>
);

// Size variations
export const SizeVariations = () => (
  <div className="flex gap-8">
    <ContextMenu>
      <ContextMenuTrigger className="flex h-[100px] w-[200px] items-center justify-center rounded-md border border-dashed text-sm">
        Small menu
      </ContextMenuTrigger>
      <ContextMenuContent size="sm">
        <ContextMenuItem>Copy</ContextMenuItem>
        <ContextMenuItem>Cut</ContextMenuItem>
        <ContextMenuItem>Paste</ContextMenuItem>
        <ContextMenuSeparator />
        <ContextMenuItem variant="destructive">Delete</ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>

    <ContextMenu>
      <ContextMenuTrigger className="flex h-[100px] w-[200px] items-center justify-center rounded-md border border-dashed text-sm">
        Default menu
      </ContextMenuTrigger>
      <ContextMenuContent>
        <ContextMenuItem>Copy</ContextMenuItem>
        <ContextMenuItem>Cut</ContextMenuItem>
        <ContextMenuItem>Paste</ContextMenuItem>
        <ContextMenuSeparator />
        <ContextMenuItem variant="destructive">Delete</ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>

    <ContextMenu>
      <ContextMenuTrigger className="flex h-[100px] w-[200px] items-center justify-center rounded-md border border-dashed text-sm">
        Large menu
      </ContextMenuTrigger>
      <ContextMenuContent size="lg">
        <ContextMenuItem>Copy</ContextMenuItem>
        <ContextMenuItem>Cut</ContextMenuItem>
        <ContextMenuItem>Paste</ContextMenuItem>
        <ContextMenuSeparator />
        <ContextMenuItem variant="destructive">Delete</ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  </div>
);

// File context menu
export const FileContextMenu = () => {
  const [favorited, setFavorited] = useState(false);
  const [bookmarked, setBookmarked] = useState(true);

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-3 gap-4">
        {/* Document file */}
        <ContextMenu>
          <ContextMenuTrigger>
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="flex flex-col items-center p-6">
                <FileText className="h-8 w-8 text-blue-500 mb-2" />
                <span className="text-sm font-medium">Document.pdf</span>
                <span className="text-xs text-muted-foreground">2.1 MB</span>
              </CardContent>
            </Card>
          </ContextMenuTrigger>
          <ContextMenuContent>
            <ContextMenuItem>
              <Eye className="mr-2 h-4 w-4" />
              Open
            </ContextMenuItem>
            <ContextMenuItem>
              <Edit className="mr-2 h-4 w-4" />
              Edit
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Copy className="mr-2 h-4 w-4" />
              Copy
              <ContextMenuShortcut>⌘C</ContextMenuShortcut>
            </ContextMenuItem>
            <ContextMenuItem>
              <Scissors className="mr-2 h-4 w-4" />
              Cut
              <ContextMenuShortcut>⌘X</ContextMenuShortcut>
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuSub>
              <ContextMenuSubTrigger>
                <Share className="mr-2 h-4 w-4" />
                Share
              </ContextMenuSubTrigger>
              <ContextMenuSubContent>
                <ContextMenuItem>
                  <Mail className="mr-2 h-4 w-4" />
                  Email
                </ContextMenuItem>
                <ContextMenuItem>
                  <Link className="mr-2 h-4 w-4" />
                  Copy link
                </ContextMenuItem>
                <ContextMenuItem>
                  <MessageSquare className="mr-2 h-4 w-4" />
                  Message
                </ContextMenuItem>
              </ContextMenuSubContent>
            </ContextMenuSub>
            <ContextMenuItem>
              <Download className="mr-2 h-4 w-4" />
              Download
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuCheckboxItem
              checked={favorited}
              onCheckedChange={setFavorited}
            >
              <Star className="mr-2 h-4 w-4" />
              Favorite
            </ContextMenuCheckboxItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Info className="mr-2 h-4 w-4" />
              Properties
            </ContextMenuItem>
            <ContextMenuItem variant="destructive">
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
              <ContextMenuShortcut>⌘⌫</ContextMenuShortcut>
            </ContextMenuItem>
          </ContextMenuContent>
        </ContextMenu>

        {/* Image file */}
        <ContextMenu>
          <ContextMenuTrigger>
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="flex flex-col items-center p-6">
                <Image className="h-8 w-8 text-green-500 mb-2" />
                <span className="text-sm font-medium">Photo.jpg</span>
                <span className="text-xs text-muted-foreground">4.7 MB</span>
              </CardContent>
            </Card>
          </ContextMenuTrigger>
          <ContextMenuContent>
            <ContextMenuItem>
              <Eye className="mr-2 h-4 w-4" />
              Preview
            </ContextMenuItem>
            <ContextMenuItem>
              <Edit className="mr-2 h-4 w-4" />
              Edit in Photos
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Copy className="mr-2 h-4 w-4" />
              Copy
            </ContextMenuItem>
            <ContextMenuItem>
              <Download className="mr-2 h-4 w-4" />
              Save to Downloads
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuCheckboxItem
              checked={bookmarked}
              onCheckedChange={setBookmarked}
            >
              <Bookmark className="mr-2 h-4 w-4" />
              Bookmark
            </ContextMenuCheckboxItem>
            <ContextMenuSeparator />
            <ContextMenuItem variant="destructive">
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </ContextMenuItem>
          </ContextMenuContent>
        </ContextMenu>

        {/* Folder */}
        <ContextMenu>
          <ContextMenuTrigger>
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="flex flex-col items-center p-6">
                <Folder className="h-8 w-8 text-blue-500 mb-2" />
                <span className="text-sm font-medium">Projects</span>
                <span className="text-xs text-muted-foreground">24 items</span>
              </CardContent>
            </Card>
          </ContextMenuTrigger>
          <ContextMenuContent>
            <ContextMenuItem>
              <Eye className="mr-2 h-4 w-4" />
              Open
            </ContextMenuItem>
            <ContextMenuItem>
              <Archive className="mr-2 h-4 w-4" />
              Compress
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Copy className="mr-2 h-4 w-4" />
              Copy
            </ContextMenuItem>
            <ContextMenuItem>
              <Scissors className="mr-2 h-4 w-4" />
              Cut
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuSub>
              <ContextMenuSubTrigger>
                <Settings className="mr-2 h-4 w-4" />
                Permissions
              </ContextMenuSubTrigger>
              <ContextMenuSubContent>
                <ContextMenuItem>
                  <Lock className="mr-2 h-4 w-4" />
                  Make Private
                </ContextMenuItem>
                <ContextMenuItem>
                  <Unlock className="mr-2 h-4 w-4" />
                  Make Public
                </ContextMenuItem>
              </ContextMenuSubContent>
            </ContextMenuSub>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Info className="mr-2 h-4 w-4" />
              Get Info
            </ContextMenuItem>
            <ContextMenuItem variant="destructive">
              <Trash2 className="mr-2 h-4 w-4" />
              Delete Folder
            </ContextMenuItem>
          </ContextMenuContent>
        </ContextMenu>
      </div>

      <div className="text-xs text-muted-foreground text-center">
        Right-click on any file or folder above to see its context menu
      </div>
    </div>
  );
};

// Text selection context menu
export const TextSelectionMenu = () => (
  <ContextMenu>
    <ContextMenuTrigger>
      <Card className="p-6 max-w-md">
        <p className="text-sm leading-relaxed select-text">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam, quis nostrud exercitation ullamco laboris.
        </p>
        <div className="mt-4 text-xs text-muted-foreground">
          Right-click on the text above to access text actions
        </div>
      </Card>
    </ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>
        <Copy className="mr-2 h-4 w-4" />
        Copy
        <ContextMenuShortcut>⌘C</ContextMenuShortcut>
      </ContextMenuItem>
      <ContextMenuItem>
        <Scissors className="mr-2 h-4 w-4" />
        Cut
        <ContextMenuShortcut>⌘X</ContextMenuShortcut>
      </ContextMenuItem>
      <ContextMenuItem>
        <ClipboardPaste className="mr-2 h-4 w-4" />
        Paste
        <ContextMenuShortcut>⌘V</ContextMenuShortcut>
      </ContextMenuItem>
      <ContextMenuSeparator />
      <ContextMenuItem>
        <Edit className="mr-2 h-4 w-4" />
        Select All
        <ContextMenuShortcut>⌘A</ContextMenuShortcut>
      </ContextMenuItem>
      <ContextMenuSeparator />
      <ContextMenuSub>
        <ContextMenuSubTrigger>
          <Settings className="mr-2 h-4 w-4" />
          Text Options
        </ContextMenuSubTrigger>
        <ContextMenuSubContent>
          <ContextMenuItem>
            <Zap className="mr-2 h-4 w-4" />
            Make Bold
          </ContextMenuItem>
          <ContextMenuItem>
            <Tag className="mr-2 h-4 w-4" />
            Add Highlight
          </ContextMenuItem>
          <ContextMenuItem>
            <Link className="mr-2 h-4 w-4" />
            Create Link
          </ContextMenuItem>
        </ContextMenuSubContent>
      </ContextMenuSub>
      <ContextMenuSeparator />
      <ContextMenuItem>
        <RefreshCw className="mr-2 h-4 w-4" />
        Reload
      </ContextMenuItem>
    </ContextMenuContent>
  </ContextMenu>
);

// Media context menu
export const MediaContextMenu = () => (
  <div className="space-y-4">
    <div className="grid grid-cols-2 gap-4">
      {/* Audio file */}
      <ContextMenu>
        <ContextMenuTrigger>
          <Card className="cursor-pointer hover:shadow-md transition-shadow">
            <CardContent className="flex flex-col items-center p-6">
              <Music className="h-12 w-12 text-purple-500 mb-3" />
              <span className="text-sm font-medium">Song.mp3</span>
              <span className="text-xs text-muted-foreground">
                3:42 • 5.2 MB
              </span>
              <Badge variant="outline" className="mt-2">
                Audio
              </Badge>
            </CardContent>
          </Card>
        </ContextMenuTrigger>
        <ContextMenuContent>
          <ContextMenuItem>
            <Zap className="mr-2 h-4 w-4" />
            Play
          </ContextMenuItem>
          <ContextMenuItem>
            <Download className="mr-2 h-4 w-4" />
            Download
          </ContextMenuItem>
          <ContextMenuSeparator />
          <ContextMenuItem>
            <Heart className="mr-2 h-4 w-4" />
            Add to Favorites
          </ContextMenuItem>
          <ContextMenuItem>
            <Flag className="mr-2 h-4 w-4" />
            Add to Playlist
          </ContextMenuItem>
          <ContextMenuSeparator />
          <ContextMenuItem>
            <Share className="mr-2 h-4 w-4" />
            Share
          </ContextMenuItem>
          <ContextMenuItem>
            <Info className="mr-2 h-4 w-4" />
            Song Info
          </ContextMenuItem>
        </ContextMenuContent>
      </ContextMenu>

      {/* Video file */}
      <ContextMenu>
        <ContextMenuTrigger>
          <Card className="cursor-pointer hover:shadow-md transition-shadow">
            <CardContent className="flex flex-col items-center p-6">
              <Video className="h-12 w-12 text-red-500 mb-3" />
              <span className="text-sm font-medium">Movie.mp4</span>
              <span className="text-xs text-muted-foreground">
                1080p • 2.1 GB
              </span>
              <Badge variant="outline" className="mt-2">
                Video
              </Badge>
            </CardContent>
          </Card>
        </ContextMenuTrigger>
        <ContextMenuContent>
          <ContextMenuItem>
            <Zap className="mr-2 h-4 w-4" />
            Play
          </ContextMenuItem>
          <ContextMenuItem>
            <Edit className="mr-2 h-4 w-4" />
            Edit
          </ContextMenuItem>
          <ContextMenuSeparator />
          <ContextMenuItem>
            <Download className="mr-2 h-4 w-4" />
            Download
          </ContextMenuItem>
          <ContextMenuItem>
            <Copy className="mr-2 h-4 w-4" />
            Copy Link
          </ContextMenuItem>
          <ContextMenuSeparator />
          <ContextMenuSub>
            <ContextMenuSubTrigger>
              <Settings className="mr-2 h-4 w-4" />
              Quality
            </ContextMenuSubTrigger>
            <ContextMenuSubContent>
              <ContextMenuItem>720p</ContextMenuItem>
              <ContextMenuItem>1080p</ContextMenuItem>
              <ContextMenuItem>4K</ContextMenuItem>
            </ContextMenuSubContent>
          </ContextMenuSub>
          <ContextMenuSeparator />
          <ContextMenuItem>
            <Info className="mr-2 h-4 w-4" />
            Video Info
          </ContextMenuItem>
        </ContextMenuContent>
      </ContextMenu>
    </div>
  </div>
);

// Table context menu
export const TableContextMenu = () => {
  const [showHidden, setShowHidden] = useState(false);
  const [viewMode, setViewMode] = useState("list");

  return (
    <ContextMenu>
      <ContextMenuTrigger>
        <Card className="w-full max-w-2xl">
          <CardContent className="p-0">
            <div className="p-4 border-b">
              <h3 className="font-semibold">Project Files</h3>
              <p className="text-sm text-muted-foreground">
                Right-click for options
              </p>
            </div>
            <div className="space-y-2 p-4">
              <div className="flex items-center justify-between py-2 px-2 hover:bg-muted rounded">
                <div className="flex items-center gap-2">
                  <File className="h-4 w-4" />
                  <span className="text-sm">index.js</span>
                </div>
                <span className="text-xs text-muted-foreground">2 KB</span>
              </div>
              <div className="flex items-center justify-between py-2 px-2 hover:bg-muted rounded">
                <div className="flex items-center gap-2">
                  <Folder className="h-4 w-4" />
                  <span className="text-sm">components</span>
                </div>
                <span className="text-xs text-muted-foreground">12 items</span>
              </div>
              <div className="flex items-center justify-between py-2 px-2 hover:bg-muted rounded">
                <div className="flex items-center gap-2">
                  <File className="h-4 w-4" />
                  <span className="text-sm">package.json</span>
                </div>
                <span className="text-xs text-muted-foreground">1 KB</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </ContextMenuTrigger>
      <ContextMenuContent>
        <ContextMenuLabel>View Options</ContextMenuLabel>
        <ContextMenuSeparator />
        <ContextMenuRadioGroup value={viewMode} onValueChange={setViewMode}>
          <ContextMenuRadioItem value="list">
            <List className="mr-2 h-4 w-4" />
            List View
          </ContextMenuRadioItem>
          <ContextMenuRadioItem value="grid">
            <Grid className="mr-2 h-4 w-4" />
            Grid View
          </ContextMenuRadioItem>
          <ContextMenuRadioItem value="columns">
            <Columns className="mr-2 h-4 w-4" />
            Columns
          </ContextMenuRadioItem>
        </ContextMenuRadioGroup>
        <ContextMenuSeparator />
        <ContextMenuCheckboxItem
          checked={showHidden}
          onCheckedChange={setShowHidden}
        >
          <EyeOff className="mr-2 h-4 w-4" />
          Show Hidden Files
        </ContextMenuCheckboxItem>
        <ContextMenuSeparator />
        <ContextMenuItem>
          <RefreshCw className="mr-2 h-4 w-4" />
          Refresh
          <ContextMenuShortcut>F5</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem>
          <Settings className="mr-2 h-4 w-4" />
          Preferences
        </ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  );
};

// Complex nested menu
export const ComplexNestedMenu = () => {
  const [bookmarked, setBookmarked] = useState(false);
  const [starred, setStarred] = useState(true);
  const [priority, setPriority] = useState("medium");

  return (
    <ContextMenu>
      <ContextMenuTrigger className="flex h-[200px] w-[400px] items-center justify-center rounded-md border border-dashed bg-muted/20">
        <div className="text-center">
          <MoreHorizontal className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
          <p className="text-sm font-medium">Complex Menu Demo</p>
          <p className="text-xs text-muted-foreground">
            Right-click for full menu
          </p>
        </div>
      </ContextMenuTrigger>
      <ContextMenuContent className="w-64">
        <ContextMenuLabel>Quick Actions</ContextMenuLabel>
        <ContextMenuSeparator />
        <ContextMenuItem>
          <Copy className="mr-2 h-4 w-4" />
          Copy
          <ContextMenuShortcut>⌘C</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem>
          <Scissors className="mr-2 h-4 w-4" />
          Cut
          <ContextMenuShortcut>⌘X</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem>
          <ClipboardPaste className="mr-2 h-4 w-4" />
          Paste
          <ContextMenuShortcut>⌘V</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuSeparator />

        <ContextMenuSub>
          <ContextMenuSubTrigger>
            <Share className="mr-2 h-4 w-4" />
            Share
          </ContextMenuSubTrigger>
          <ContextMenuSubContent>
            <ContextMenuItem>
              <Mail className="mr-2 h-4 w-4" />
              Email
            </ContextMenuItem>
            <ContextMenuItem>
              <Link className="mr-2 h-4 w-4" />
              Copy Link
            </ContextMenuItem>
            <ContextMenuItem>
              <Phone className="mr-2 h-4 w-4" />
              SMS
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuSub>
              <ContextMenuSubTrigger>
                <MoreHorizontal className="mr-2 h-4 w-4" />
                More Options
              </ContextMenuSubTrigger>
              <ContextMenuSubContent>
                <ContextMenuItem>Social Media</ContextMenuItem>
                <ContextMenuItem>Export PDF</ContextMenuItem>
                <ContextMenuItem>Print</ContextMenuItem>
              </ContextMenuSubContent>
            </ContextMenuSub>
          </ContextMenuSubContent>
        </ContextMenuSub>

        <ContextMenuSub>
          <ContextMenuSubTrigger>
            <Tag className="mr-2 h-4 w-4" />
            Priority
          </ContextMenuSubTrigger>
          <ContextMenuSubContent>
            <ContextMenuRadioGroup value={priority} onValueChange={setPriority}>
              <ContextMenuRadioItem value="low">
                Low Priority
              </ContextMenuRadioItem>
              <ContextMenuRadioItem value="medium">
                Medium Priority
              </ContextMenuRadioItem>
              <ContextMenuRadioItem value="high">
                High Priority
              </ContextMenuRadioItem>
              <ContextMenuRadioItem value="urgent">Urgent</ContextMenuRadioItem>
            </ContextMenuRadioGroup>
          </ContextMenuSubContent>
        </ContextMenuSub>

        <ContextMenuSeparator />

        <ContextMenuLabel inset>Favorites</ContextMenuLabel>
        <ContextMenuCheckboxItem
          checked={bookmarked}
          onCheckedChange={setBookmarked}
        >
          <Bookmark className="mr-2 h-4 w-4" />
          Bookmark
        </ContextMenuCheckboxItem>
        <ContextMenuCheckboxItem checked={starred} onCheckedChange={setStarred}>
          <Star className="mr-2 h-4 w-4" />
          Add to Starred
        </ContextMenuCheckboxItem>

        <ContextMenuSeparator />

        <ContextMenuItem>
          <Calendar className="mr-2 h-4 w-4" />
          Schedule
          <ContextMenuShortcut>⌘S</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem>
          <Clock className="mr-2 h-4 w-4" />
          Set Reminder
        </ContextMenuItem>

        <ContextMenuSeparator />

        <ContextMenuItem>
          <Archive className="mr-2 h-4 w-4" />
          Archive
        </ContextMenuItem>
        <ContextMenuItem variant="destructive">
          <Trash2 className="mr-2 h-4 w-4" />
          Delete
          <ContextMenuShortcut>⌘⌫</ContextMenuShortcut>
        </ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  );
};

// Gallery context menu
export const GalleryContextMenu = () => (
  <div className="grid grid-cols-3 gap-4 max-w-2xl">
    {Array.from({ length: 6 }, (_, i) => {
      const icons = [Image, Video, Music, FileText, Archive, File];
      const colors = [
        "text-green-500",
        "text-red-500",
        "text-purple-500",
        "text-blue-500",
        "text-orange-500",
        "text-gray-500",
      ];
      const names = [
        "photo.jpg",
        "video.mp4",
        "song.mp3",
        "document.pdf",
        "archive.zip",
        "data.json",
      ];

      const Icon = icons[i];

      return (
        <ContextMenu key={i}>
          <ContextMenuTrigger>
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="flex flex-col items-center p-4">
                <Icon className={`h-8 w-8 ${colors[i]} mb-2`} />
                <span className="text-xs font-medium truncate w-full text-center">
                  {names[i]}
                </span>
              </CardContent>
            </Card>
          </ContextMenuTrigger>
          <ContextMenuContent>
            <ContextMenuItem>
              <Eye className="mr-2 h-4 w-4" />
              Open
            </ContextMenuItem>
            <ContextMenuItem>
              <Download className="mr-2 h-4 w-4" />
              Download
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Copy className="mr-2 h-4 w-4" />
              Copy
            </ContextMenuItem>
            <ContextMenuItem>
              <Share className="mr-2 h-4 w-4" />
              Share
            </ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>
              <Info className="mr-2 h-4 w-4" />
              Properties
            </ContextMenuItem>
            <ContextMenuItem variant="destructive">
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </ContextMenuItem>
          </ContextMenuContent>
        </ContextMenu>
      );
    })}
    <div className="col-span-3 text-xs text-muted-foreground text-center mt-2">
      Right-click on any item above for context menu
    </div>
  </div>
);

// Interactive playground
export const Playground = (args: { size?: "sm" | "default" | "lg" }) => (
  <ContextMenu>
    <ContextMenuTrigger className="flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm">
      Playground Context Menu
      <br />
      <span className="text-xs text-muted-foreground">Right click to test</span>
    </ContextMenuTrigger>
    <ContextMenuContent size={args.size}>
      <ContextMenuItem>
        <Copy className="mr-2 h-4 w-4" />
        Copy
      </ContextMenuItem>
      <ContextMenuItem>
        <Edit className="mr-2 h-4 w-4" />
        Edit
      </ContextMenuItem>
      <ContextMenuItem>
        <Share className="mr-2 h-4 w-4" />
        Share
      </ContextMenuItem>
      <ContextMenuSeparator />
      <ContextMenuItem variant="destructive">
        <Trash2 className="mr-2 h-4 w-4" />
        Delete
      </ContextMenuItem>
    </ContextMenuContent>
  </ContextMenu>
);

Playground.args = {
  size: "default",
};

// API Reference
export const APIReference = () => (
  <div className="space-y-6 max-w-4xl">
    <div>
      <h3 className="text-lg font-semibold mb-3">Context Menu API Reference</h3>
      <p className="text-sm text-muted-foreground mb-4">
        Complete API reference for the Context Menu component. Based on Radix UI
        primitives.
      </p>
    </div>

    <div className="space-y-4">
      <div>
        <h4 className="font-medium mb-2">ContextMenu.Root</h4>
        <div className="text-sm text-muted-foreground mb-2">
          Contains all the parts of a context menu.
        </div>
        <div className="overflow-x-auto">
          <table className="w-full text-sm border-collapse border border-border">
            <thead>
              <tr className="border-b border-border bg-muted/50">
                <th className="border border-border px-3 py-2 text-left">
                  Prop
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Type
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Default
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Description
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  open
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  boolean
                </td>
                <td className="border border-border px-3 py-2">-</td>
                <td className="border border-border px-3 py-2">
                  The controlled open state of the context menu. Must be used in
                  conjunction with onOpenChange.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  defaultOpen
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  boolean
                </td>
                <td className="border border-border px-3 py-2">false</td>
                <td className="border border-border px-3 py-2">
                  The open state when initially rendered. Use when you do not
                  need to control its open state.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  onOpenChange
                </td>
                <td className="border border-border px-3 py-2 font-mono">{`(open: boolean) => void`}</td>
                <td className="border border-border px-3 py-2">-</td>
                <td className="border border-border px-3 py-2">
                  Event handler called when the open state changes.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  modal
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  boolean
                </td>
                <td className="border border-border px-3 py-2">true</td>
                <td className="border border-border px-3 py-2">
                  The modality of the context menu. When true, interaction with
                  outside elements is disabled.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div>
        <h4 className="font-medium mb-2">ContextMenu.Content</h4>
        <div className="text-sm text-muted-foreground mb-2">
          The component that pops out when the context menu is open.
        </div>
        <div className="overflow-x-auto">
          <table className="w-full text-sm border-collapse border border-border">
            <thead>
              <tr className="border-b border-border bg-muted/50">
                <th className="border border-border px-3 py-2 text-left">
                  Prop
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Type
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Default
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Description
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  side
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  "top" | "right" | "bottom" | "left"
                </td>
                <td className="border border-border px-3 py-2">bottom</td>
                <td className="border border-border px-3 py-2">
                  The preferred side of the trigger to render against.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  align
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  "start" | "center" | "end"
                </td>
                <td className="border border-border px-3 py-2">center</td>
                <td className="border border-border px-3 py-2">
                  The preferred alignment against the trigger.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  sideOffset
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  number
                </td>
                <td className="border border-border px-3 py-2">0</td>
                <td className="border border-border px-3 py-2">
                  The distance in pixels from the trigger.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  avoidCollisions
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  boolean
                </td>
                <td className="border border-border px-3 py-2">true</td>
                <td className="border border-border px-3 py-2">
                  When true, overrides side and align to prevent collisions.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div>
        <h4 className="font-medium mb-2">ContextMenu.Item</h4>
        <div className="text-sm text-muted-foreground mb-2">
          The component that contains the context menu items.
        </div>
        <div className="overflow-x-auto">
          <table className="w-full text-sm border-collapse border border-border">
            <thead>
              <tr className="border-b border-border bg-muted/50">
                <th className="border border-border px-3 py-2 text-left">
                  Prop
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Type
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Default
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Description
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  disabled
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  boolean
                </td>
                <td className="border border-border px-3 py-2">false</td>
                <td className="border border-border px-3 py-2">
                  When true, prevents the user from interacting with the item.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  onSelect
                </td>
                <td className="border border-border px-3 py-2 font-mono">{`(event: Event) => void`}</td>
                <td className="border border-border px-3 py-2">-</td>
                <td className="border border-border px-3 py-2">
                  Event handler called when the user selects an item.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  textValue
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  string
                </td>
                <td className="border border-border px-3 py-2">-</td>
                <td className="border border-border px-3 py-2">
                  Optional text used for typeahead purposes.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div>
        <h4 className="font-medium mb-2">Data Attributes</h4>
        <div className="text-sm text-muted-foreground mb-2">
          Data attributes are automatically applied and can be used for styling.
        </div>
        <div className="overflow-x-auto">
          <table className="w-full text-sm border-collapse border border-border">
            <thead>
              <tr className="border-b border-border bg-muted/50">
                <th className="border border-border px-3 py-2 text-left">
                  Attribute
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Values
                </th>
                <th className="border border-border px-3 py-2 text-left">
                  Description
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  [data-state]
                </td>
                <td className="border border-border px-3 py-2 font-mono">
                  "open" | "closed"
                </td>
                <td className="border border-border px-3 py-2">
                  Present on Content. The open state of the context menu.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  [data-highlighted]
                </td>
                <td className="border border-border px-3 py-2 font-mono">""</td>
                <td className="border border-border px-3 py-2">
                  Present on Item when highlighted.
                </td>
              </tr>
              <tr>
                <td className="border border-border px-3 py-2 font-mono">
                  [data-disabled]
                </td>
                <td className="border border-border px-3 py-2 font-mono">""</td>
                <td className="border border-border px-3 py-2">
                  Present on Item when disabled.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
);

// Advanced Example
export const AdvancedExample = () => {
  const [contextState, setContextState] = useState({
    isOpen: false,
    selectedItems: new Set(),
    viewMode: "grid",
    sortBy: "name",
    showHidden: false,
    enableNotifications: true,
    autoSave: false,
    theme: "light",
  });

  const handleItemSelect = (itemId: string, selected: boolean) => {
    const newSelected = new Set(contextState.selectedItems);
    if (selected) {
      newSelected.add(itemId);
    } else {
      newSelected.delete(itemId);
    }
    setContextState((prev) => ({
      ...prev,
      selectedItems: newSelected,
    }));
  };

  return (
    <div className="space-y-6 w-full max-w-4xl">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">Advanced Context Menu System</h3>
        <div className="text-sm text-muted-foreground">
          Selected: {contextState.selectedItems.size} items
        </div>
      </div>

      <div className="grid grid-cols-4 gap-4">
        {Array.from({ length: 8 }, (_, i) => {
          const itemId = `item-${i}`;
          const isSelected = contextState.selectedItems.has(itemId);
          const fileTypes = ["document", "image", "video", "audio"];
          const fileType = fileTypes[i % 4];
          const icons = {
            document: FileText,
            image: Image,
            video: Video,
            audio: Music,
          };
          const Icon = icons[fileType as keyof typeof icons];
          const colors = {
            document: "text-blue-500",
            image: "text-green-500",
            video: "text-red-500",
            audio: "text-purple-500",
          };
          const color = colors[fileType as keyof typeof colors];

          return (
            <ContextMenu
              key={itemId}
              onOpenChange={(open) =>
                setContextState((prev) => ({ ...prev, isOpen: open }))
              }
            >
              <ContextMenuTrigger>
                <Card
                  className={`cursor-pointer transition-all hover:shadow-md ${
                    isSelected ? "ring-2 ring-primary bg-primary/5" : ""
                  }`}
                >
                  <CardContent className="flex flex-col items-center p-4">
                    <Icon className={`h-8 w-8 ${color} mb-2`} />
                    <span className="text-sm font-medium">
                      File {i + 1}.
                      {fileType === "document"
                        ? "pdf"
                        : fileType === "image"
                          ? "jpg"
                          : fileType === "video"
                            ? "mp4"
                            : "mp3"}
                    </span>
                    <Badge variant="outline" className="mt-1 text-xs">
                      {fileType}
                    </Badge>
                    {isSelected && (
                      <div className="absolute top-2 right-2">
                        <div className="h-4 w-4 bg-primary rounded-full flex items-center justify-center">
                          <div className="h-2 w-2 bg-white rounded-full" />
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </ContextMenuTrigger>
              <ContextMenuContent className="w-56">
                <ContextMenuLabel>File Actions</ContextMenuLabel>
                <ContextMenuSeparator />

                <ContextMenuItem>
                  <Eye className="mr-2 h-4 w-4" />
                  Open
                  <ContextMenuShortcut>⏎</ContextMenuShortcut>
                </ContextMenuItem>

                <ContextMenuItem>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit
                  <ContextMenuShortcut>⌘E</ContextMenuShortcut>
                </ContextMenuItem>

                <ContextMenuSeparator />

                <ContextMenuCheckboxItem
                  checked={isSelected}
                  onCheckedChange={(checked) =>
                    handleItemSelect(itemId, checked)
                  }
                >
                  <Star className="mr-2 h-4 w-4" />
                  Select Item
                </ContextMenuCheckboxItem>

                <ContextMenuSeparator />

                <ContextMenuSub>
                  <ContextMenuSubTrigger>
                    <Share className="mr-2 h-4 w-4" />
                    Share
                  </ContextMenuSubTrigger>
                  <ContextMenuSubContent>
                    <ContextMenuItem>
                      <Mail className="mr-2 h-4 w-4" />
                      Email
                    </ContextMenuItem>
                    <ContextMenuItem>
                      <Link className="mr-2 h-4 w-4" />
                      Copy Link
                    </ContextMenuItem>
                    <ContextMenuItem>
                      <Download className="mr-2 h-4 w-4" />
                      Export
                    </ContextMenuItem>
                  </ContextMenuSubContent>
                </ContextMenuSub>

                <ContextMenuSub>
                  <ContextMenuSubTrigger>
                    <MoreHorizontal className="mr-2 h-4 w-4" />
                    More Actions
                  </ContextMenuSubTrigger>
                  <ContextMenuSubContent>
                    <ContextMenuItem>
                      <Archive className="mr-2 h-4 w-4" />
                      Compress
                    </ContextMenuItem>
                    <ContextMenuItem>
                      <Lock className="mr-2 h-4 w-4" />
                      Encrypt
                    </ContextMenuItem>
                    <ContextMenuItem>
                      <Clock className="mr-2 h-4 w-4" />
                      Schedule
                    </ContextMenuItem>
                  </ContextMenuSubContent>
                </ContextMenuSub>

                <ContextMenuSeparator />

                <ContextMenuItem>
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                  <ContextMenuShortcut>⌘C</ContextMenuShortcut>
                </ContextMenuItem>

                <ContextMenuItem>
                  <Scissors className="mr-2 h-4 w-4" />
                  Cut
                  <ContextMenuShortcut>⌘X</ContextMenuShortcut>
                </ContextMenuItem>

                <ContextMenuSeparator />

                <ContextMenuItem>
                  <Info className="mr-2 h-4 w-4" />
                  Properties
                  <ContextMenuShortcut>⌘I</ContextMenuShortcut>
                </ContextMenuItem>

                <ContextMenuItem variant="destructive">
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete
                  <ContextMenuShortcut>⌘⌫</ContextMenuShortcut>
                </ContextMenuItem>
              </ContextMenuContent>
            </ContextMenu>
          );
        })}
      </div>

      {/* Global Settings Context Menu */}
      <ContextMenu>
        <ContextMenuTrigger>
          <Card className="p-6 border-dashed">
            <div className="text-center">
              <Settings className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
              <p className="text-sm font-medium">Global Settings</p>
              <p className="text-xs text-muted-foreground">
                Right-click to configure global options
              </p>
            </div>
          </Card>
        </ContextMenuTrigger>
        <ContextMenuContent className="w-64">
          <ContextMenuLabel>View Settings</ContextMenuLabel>
          <ContextMenuSeparator />

          <ContextMenuRadioGroup
            value={contextState.viewMode}
            onValueChange={(value) =>
              setContextState((prev) => ({ ...prev, viewMode: value }))
            }
          >
            <ContextMenuRadioItem value="grid">
              <Grid className="mr-2 h-4 w-4" />
              Grid View
            </ContextMenuRadioItem>
            <ContextMenuRadioItem value="list">
              <List className="mr-2 h-4 w-4" />
              List View
            </ContextMenuRadioItem>
            <ContextMenuRadioItem value="columns">
              <Columns className="mr-2 h-4 w-4" />
              Column View
            </ContextMenuRadioItem>
          </ContextMenuRadioGroup>

          <ContextMenuSeparator />

          <ContextMenuLabel>Sort Options</ContextMenuLabel>
          <ContextMenuRadioGroup
            value={contextState.sortBy}
            onValueChange={(value) =>
              setContextState((prev) => ({ ...prev, sortBy: value }))
            }
          >
            <ContextMenuRadioItem value="name">
              <Tag className="mr-2 h-4 w-4" />
              Name
            </ContextMenuRadioItem>
            <ContextMenuRadioItem value="date">
              <Calendar className="mr-2 h-4 w-4" />
              Date Modified
            </ContextMenuRadioItem>
            <ContextMenuRadioItem value="size">
              <Archive className="mr-2 h-4 w-4" />
              File Size
            </ContextMenuRadioItem>
          </ContextMenuRadioGroup>

          <ContextMenuSeparator />

          <ContextMenuCheckboxItem
            checked={contextState.showHidden}
            onCheckedChange={(checked) =>
              setContextState((prev) => ({ ...prev, showHidden: checked }))
            }
          >
            <EyeOff className="mr-2 h-4 w-4" />
            Show Hidden Files
          </ContextMenuCheckboxItem>

          <ContextMenuCheckboxItem
            checked={contextState.enableNotifications}
            onCheckedChange={(checked) =>
              setContextState((prev) => ({
                ...prev,
                enableNotifications: checked,
              }))
            }
          >
            <Bell className="mr-2 h-4 w-4" />
            Enable Notifications
          </ContextMenuCheckboxItem>

          <ContextMenuCheckboxItem
            checked={contextState.autoSave}
            onCheckedChange={(checked) =>
              setContextState((prev) => ({ ...prev, autoSave: checked }))
            }
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Auto Save
          </ContextMenuCheckboxItem>

          <ContextMenuSeparator />

          <ContextMenuItem>
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh All
            <ContextMenuShortcut>F5</ContextMenuShortcut>
          </ContextMenuItem>

          <ContextMenuItem>
            <Settings className="mr-2 h-4 w-4" />
            Preferences
            <ContextMenuShortcut>⌘,</ContextMenuShortcut>
          </ContextMenuItem>
        </ContextMenuContent>
      </ContextMenu>

      <div className="flex justify-between items-center pt-4 border-t">
        <div className="text-sm text-muted-foreground">
          Context menu state: {contextState.isOpen ? "Open" : "Closed"} | View:{" "}
          {contextState.viewMode} | Sort: {contextState.sortBy}
        </div>
        <Badge
          variant={
            contextState.selectedItems.size > 0 ? "default" : "secondary"
          }
        >
          {contextState.selectedItems.size} selected
        </Badge>
      </div>
    </div>
  );
};
